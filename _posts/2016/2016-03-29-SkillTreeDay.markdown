---
layout: post
title:  "Skill Tree Day 會員專屬研討會"
date:   2016-03-26 22:28:00
categories: ClassReview
---

這次參加的活動是由 SKILL TREE 舉辦的舊生回歸活動，只要參加過Skill tree 活動就可以獲得免費上課資格，
意外的是，活動結束突然抽起獎來，而且大獎還蠻不錯的:

- JetBrains 全產品 (光 Resharp 就很值啦!) [https://www.jetbrains.com/products.html](https://www.jetbrains.com/products.html)
- 一年份 OzCode [http://www.oz-code.com/](http://www.oz-code.com/)
- 微軟藍芽鍵盤
- 藍芽行動喇叭
- 美髮組(好像有離子夾 bla bla 的)

除了大獎令人興奮，課程內容也蠻不錯! (為了早起搭車，前晚徹夜難眠值得了 T.T

活動網址: [https://skilltree.my/events/ccga](https://skilltree.my/events/ccga)


## 課程簡介
> 此活動為 SkillTree 回饋會員的活動，屬於研討會性質，邀請到了 SkillTree 的講師群 Bill Chung , Kirk Chen（陳鋒逸） , Joey（陳仕傑） ,  Maduka（白俊毅） , Jeff（朱明中）來講授以下主題
>
> - 解構 C# 物件導向 
> - 使用 Ionic 開發跨平台 App 
> - Scrum estimation 
> - 使用雲端工具快速建構敏捷團隊 
> - ASP .NET Core 入門

會議分為 5 個場次，每個場次都蠻精彩，以下是各場次的心得筆記，話說可惜場地沒有插頭，會議室有點像以前念書的階梯教室。

- - -

### 解構 C# 物件導向 (Bill)

Bill 主要講解抽象與物件導向特性，以各種生活例子舉出抽象的好處，
以徵女友為例

    如果設定女友條件為具體個體，也就是指定就是要林志玲，
    世界上就一個林志玲，想當然需求無法滿足，
    因此當條件不符又要更換條件時，又必須再次具體指明個體，
    如此根據不同的條件必須一直更動設計，
    每每個體需求變動就要修改條件，這也太折騰人了，
    因此，可以改成用描述抽象方式，
    像是大學畢業、身高160up、大眼睛、女生，如此才能匹配找到符合的條件。

而抽象就是一個我們平常在生活上就在使用的技巧，我們說動物，說狗，說貓，都是抽象的描述，抽象是用來方便與順利溝通的方法，因此將程式碼寫成抽象更適合符合使用者所提出來的需求。

而抽象，以數學的角度來說，就像是歸納出規則與公式，以一個數學計算題目舉例，
以具象的思考方式將會寫出一堆 if else 判斷條件，如果跳脫具象的條件，思考需求共同的特徵是什麼，
抽象出規則，就可以找到一條公式，直接解決算出結果，不管條件有多少，一行解決。

另外以一個簡單的程式碼的例子，
比較兩個數值，假設使用者需要比較兩個 int 是否一致，還有兩個 float 是否一致，
以具象的思考方式，可能就會寫出兩個判斷是 if (Equal((int)a, (int)b)) , if( Equal((float) a, (float) b)，
但如果利用抽象化的方式，就可以利用介面，IComprable 去實作 Equal，一套萬用，只要實作就可以有 equal 方法了。

萬變不離其宗 

> **高內聚，低耦合**

寫出好維護的 code 就是寫出好 code 的目標啊！

利用介面抽出耦合，利用工廠模式，降低客戶端程式碼修改副作用，跟著 SOLID 6 大原則寫出優良程式碼。

如果有上過 Bill 的物件導向課程，基本上算是複習了一遍課程精隨。

- - -

### 使用雲端工具快速建構敏捷團隊 (小白)
第二場是小白分享敏捷開發與雲端工具，之前沒有聽過小白的課，這次的課程覺得還蠻不錯的。

首先介紹敏捷，可能我們團隊已經 run 敏捷開發好一段時間(已經 run 到不是太像敏捷的敏捷，冏)，所聽起敏捷的原則也是蠻有感的。

以敏捷流程來比較傳統的 CMMI 流程說明，4個敏捷主張，

- 個人 & 互動 > 流程 & 工具
- 可用的軟體 > 詳細文件
- 與客戶合作 > 與客戶定合約
- 回應變化 > 遵循計畫


針對敏捷的精神，計畫永遠趕不上變化，套一句美國前總統艾森豪說的名言

> "Plans are nothing, planning is everything" - Dwight D. Eisenhower

所以敏捷的宗旨就是一直溝通與改變計畫，再套句 91 說的，如何打中一台飛來飛去的戰機，就是射出去的導彈重新瞄準，重新瞄準，再重新瞄準!

ok, 接下來小白講道另一個原則，黃金三角形
Time, Cost, Scope 三個維度組成，

以往的需求都是以 Scope 來推動應該要投入多少的人力(Cost), 時間(Time)，因此對於團隊來說工作估計來看往往是被動與不準確的，
敏捷開發角度來思考，變成以有多少的人力、時間，而能做成多少事情，工作估算是由開發人員自己推估出來。
這樣的思考方式讓我想到管理學上的推式(Push)與拉式(Pull)，推的是被動無法及時變化，拉的就是能夠快速因應變化，因此以現在快速多變的軟體開發環境，自然 pull 能夠勝出。

下半場小白分享一些實際的雲端工具用來 run 敏捷，

主要分成兩類:

1. 使用微軟的 VSTS 就可以含括敏捷所需要的工具 (微軟派的 XD
2. 使用一些新的雲端服務，結合起來也可以達到開發整合與溝通整合

其實 VSTS 應該是蠻不錯的，雖然我們公司沒有真正使用相關的功能，不過以一個大公司來看，或許真的直接使用 VSTS 是不錯的選擇。
不過台灣最多的就是中小企業，自然中小專案也是不少的，因此用量與功能性要求不是那麼高端的話，免費流可能還是比較有吸引力


免費雲端流:

- GitHub : 程式碼版控平台，這就不用多解釋了，每個開發應該都會知道的。    
- Trello: 工作看板，這讓我想到 JIRA，蛋蛋使用的 JIRA 基本應該也算是工作看板的概念，而 Trello 除了基本免費外，反應也是快速即時，相對於肥大的 JIRA，或許對於主管與開發團隊人數不到十人來說， Trello 就是個很不錯的選擇。
- Jinkess: 自動上板工具，這個好像也蠻火紅，不是很熟，可以研究一下。
- Slack: 工作群組通訊軟體，這個東西最近同事也有分享，發現真的蠻不錯，除了一般的通訊溝通之外，還有整合各個雲端工具，可以自動推波雲端工具的進行狀態，讚!
- Google Drive: 文件管理，這也不用多解釋了 


接下來小白主要分享以 Slack 去整合各雲端服務的推波，如何設定這樣。
心得: 對於開發團隊可以練習使用這些新的工具，或許能帶來更好的工作流程也不一定，不過所有的東西還是要看情境，如果團隊已經習慣舊有的方式，其實也沒什麼不好，像我們 one note 個人就覺得用的還算不錯。

- - -

上午的課程就到這邊，已經是免費的課程麻，所以中午就自行到摩斯外食去了，

因為我這個人沒睡午覺就很奇怪，下午會有一種說不出來的疲憊與愛睏，喝了咖啡也沒用，因此可惜了再來下午前兩場講到後面都不小心瞇上眼打頓。

- - -

### ASP .NET Core 入門 (小朱)

小朱分享在 APPLE MAC 上去撰寫一個以 ASP.NET Core 的 .Net 專案，從專案樣本到部屬執行 serve。
首先介紹 ASP.NET Core 與以往的 ASP.NET 不同處，其中 app.config 配置以 project.json 取代，也就是 json 配置取代 xml，
另外就是  ASP.NET Core 移除掉的一些大包 framework 讓 .net 更精小了，因此很多 ASP.NET Framework 的綁死死功能就不能用了，
像是 ASP.NET Web Form、WPF 目前都不能使用 Core 開發，未來可能也不會 support，因為太多的原件綁死了，
另外還有開發桌面 app 的部分，system.windows.form 也沒辦法使用 .NET Core 。

介紹完後，接下來便從實戰的部分開始，ASP.NET core 透過 Startup.cs 來指定如何 Run 專案，
有點像是 IIS 的腳色，沒錯，所以 ASP.NET Core 也和 IIS 分離，兩個不再是綁再一起的功能。

總的來說，微軟響應 open source，ASP.NET Core 可以在不同的平台(作業系統) 上面做開發，架設服務，open source 已經是未來的趨勢，
不過改變不是一時半刻，路途遙遠可能還有段時間要走，
像是小朱介紹的操作方式，全部都是以終端機下指令方式完成，雖然未來肯定是會有人性化的 UI 介面，不過就像前面說的，還有段路要走。

- - -

### 使用 Ionic 開發跨平台 App (小風)

小風的分享比較偏向工具的實際操作體驗，Ionic (念*艾歐尼克*)簡單的說就是一種手機 app 的快速開發框架，可以使用網頁架構方式產生 ios, android 的 app。

好處:

1. JS base
2. Kodora(與手機原生介面溝通的工具)
3. angular base
4. 快速開發
5. 多平台(IOS, Android)

缺點當然就是效能，以及相對原生來講的純體驗XD
基於這一點，後面很多人提問的問題都在這一塊，要如何在效能上權衡一個專案到底要用原生還是像是 Ionic 這樣的工具。
簡單的說就跟 css RWD 響應式設計一樣，有錢有時間當然原生好，沒錢趕時間當然就是要快速簡單開發。
另外就是有些只是想法提出，不知道市場到底買不買單，可先用 Ionic 來開發像是模型的功能投入市場看看反映。

再來實際 demo code，像是實作出手機 bar code 掃描功能，只要 5 分鐘搞定，僅靠 HTML & JS 
還有像是 IOS 的 menu nav，推波功等等，甚至還有一個強制更新的OP功能，
(有多 OP，想想一個新產品會不會有很多bug, 光是 app/play store 審核時間流程等不說，如果每次 bug 都要 user 手動下載更新版，
甚至有的 user 根本不更新的，那個 app 不就壞掉，所以這種類似網頁功能可以強制更新有多威阿!XD)

- - -

### Scrum estimation (91)
 91 哥不愧是 91，真的很厲害啊，整場無冷場!!

一開始以一個從**計畫舊金山走路到洛杉磯**的例子，活生血淋的描述了軟體開發的不確定性的估算與執行過程。

    兩個走友決定要從舊金山步行到洛杉磯，
    故事就這樣開始了，
    從 map 上大略估計要走的路程，
    推估一周可以抵達目的地，
    於是通知住在洛杉磯的好~~磯~~朋友，
    而當開始走的第一天，就發現路線曲折，
    計畫與事實不相符，必須加時，
    重新評估了一下到達時間，整頓士氣又上路，
    想當然，故事不會這麼的順遂，
    再走下去又開始遇到各種狀況，
    強風、大雨、路崩、橋斷、瘋狗、扭傷等等，
    因此路程一延再延，甚至中途有人就退出搭車回家了...
    士氣大崩，朋友決裂，這個步行計畫就這樣吹了。
        
        
從這個例子中(91還做了一堆動畫，很有心阿)，描述不準確的估時，
對於專案執行下去的慘況，團隊的各種士氣的變化以及 user 從興奮到生氣。
因此，敏捷開發由此而生，切小力度，相對比較，提高估時準確度，
再來說說 run scrum 的基本規則，不相干的人不干涉估算
(舉例是雞豬故事，雞豬開餐廳，雞提議賣火腿蛋，一個割肉單然不願意)

另外 91 歸納出 **三大估算 SPA** 

* Simple簡單(好估)
* public公開(讓PO了解)
* agreeable共識(大家能一起做事)

再來便是 scrum 如何進行估時，

兩大重點，

> **相對比較**與**小粒度**

舉例來說:  
- 一隻吉娃娃到底是有多大，很難說，但是放上哈士奇後，兩隻狗就很好說出誰大誰小，到底差多少 -> **相對比較容易比較**  
- 折一個紙飛機要花多少時間的時間，很好估時，但如果要做一台戰鬥機，大家都答不出來要多少時間 -> **小粒度比較好估時**難說  
- 塞滿大石頭的罐子一推空隙，而改成小石子的話，罐子的空隙就少很多 -> **小粒粒彈性高，且減少浪費**  

接下來就是講道 Scrum 中如何進行 story point 的估算，
排一排狗，用費氏數列估時 Dog point 估算捏出需求難易度(還是狗舉例 XD)，
當有難易度後，最小的需求時間出來，其他項目就比較好估時數了。

另外提到一點，估時數不要輕易在團隊裡面定 *一天只估 4hrs 工作時數* 這樣的條件，
很多意外是想不到的 (想想舊金山到洛杉磯的心路歷程)，
所以就算只估一天 4hrs 工作量，結果可能還是做不完，
當項目無法如計畫完成的時候，這個 *一天只做4hrs* 的條件，就會成為被上面拿來打壓與說嘴的痛點了。

最後壓軸，91利用各種數據與線圖，來說明如何計算時數，
而要求肯定會變，像是專案提前結束，工作量變多等等，如何調整也是門學問，
專案不外乎 3 點，Time 時程(X軸)，Speed 工作效率(斜率)，Scope 工作量(Y軸)，
非得要提前時程的話，
如何說服 PO 可能可以拿掉比較不重要的功能 ，又或者如何有計畫的欠技術債。

另外還提到要將功能點部分完成，必須先求有再求好，

舉例來說:

    uesr 提出需要一台可以代步的需求，因此想要製造出一台汽車；
    一般完整流程來說，可能會先造車輪，造底盤，造引擎，再造車體等等，
    而可以試著改變成品單位，先造一個滑板，讓 user 使用後再 feedback，
    再造滑板車，再造腳踏車，機車，最後才是汽車。

因為 User 真正需要的是一個可以代步的交通工具，很有可能當 user 在使用腳踏車時，突然還有其他更重要的東西需要去製造，
結果這個移動交通工具最終是交付一台腳踏車，對 user 來說就是一個折衷的最好辦法，在有限的時程內，滿足堪用的需求。

另外 91 提個實際的案例，他以前在 yahoo 購物的案子，
有個計劃是要跟便利商店合作貨運物流，計畫 "全家" 與 "7-11" 兩家便利商店，
但是估算結果發現，時程上無法配合兩家都做完，所以就決定先以 "全家" 功能先完成，
結果 "全家" 完成後，又有更重要的其他功能要做，時至今日，也還也只有 "全家" 配合 yahoo 購物，
所以如何最大程度滿足 user 在時程內想要的東西，那就是切出可用的功能點，這就是敏捷開發。

話說 91 課程到最後，
給我的感覺，估時就是開發人員(dev) 必須要讓產品經理(PO) 知道為何要這樣估，
如此 dev 才有條件去說服 po，跟 po 談為何時程上無法完成，提出來的需求是不合理的，
因為怎樣怎樣怎樣，所以必須如何取捨，真正了解開發內容的 dev ，需要提供數據讓 PO 去選擇，
這樣 PO 才好跟 boss fighting!